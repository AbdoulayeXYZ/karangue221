#!/usr/bin/env node

/**
 * Script pour configurer la structure SaaS compl√®te
 * - Admin Super-Utilisateur (SaaS Owner)
 * - Tenant "Dakar Dem Dikk"
 * - User Owner du Tenant
 */

const bcrypt = require('bcrypt');
const mysql = require('mysql2/promise');
require('dotenv').config();

async function setupSaaSStructure() {
  let connection;
  
  try {
    // Configuration de la base de donn√©es
    const dbConfig = {
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'karangue221',
      port: process.env.DB_PORT || 3306
    };

    console.log('üöÄ Configuration de la structure SaaS - Karangue221');
    console.log('==================================================\n');

    console.log('üîå Connexion √† la base de donn√©es...');
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Connect√© √† la base de donn√©es MySQL');

    // 1. CR√âER L'ADMIN SUPER-UTILISATEUR (SaaS Owner)
    console.log('\nüëë √âTAPE 1: Cr√©ation de l\'Admin Super-Utilisateur');
    console.log('--------------------------------------------------');
    
    const adminData = {
      name: 'Super Administrateur SaaS',
      email: 'admin@admin.com',
      password: 'admin1234',
      role: 'admin',
      phone: '+221770000000',
      status: 'active',
      tenant_id: 1 // Tenant syst√®me pour l'admin
    };

    const adminUserId = await createOrUpdateAdminUser(connection, adminData);
    console.log(`‚úÖ Admin Super-Utilisateur cr√©√©/mis √† jour (ID: ${adminUserId})`);

    // 2. CR√âER LE TENANT "DAKAR DEM DIKK"
    console.log('\nüè¢ √âTAPE 2: Cr√©ation du Tenant "Dakar Dem Dikk"');
    console.log('------------------------------------------------');
    
    const tenantData = {
      name: 'Dakar Dem Dikk',
      subdomain: 'dakar-dem-dikk',
      domain: 'dakar-dem-dikk.karangue221.com',
      plan: 'premium',
      settings: JSON.stringify({
        features: ['gps_tracking', 'driver_analytics', 'fleet_management', 'incident_management'],
        max_vehicles: 150,
        max_drivers: 75,
        country: 'S√©n√©gal',
        timezone: 'Africa/Dakar'
      })
    };

    const tenantId = await createTenant(connection, tenantData);
    console.log(`‚úÖ Tenant "Dakar Dem Dikk" cr√©√© (ID: ${tenantId})`);

    // 3. CR√âER L'USER OWNER DU TENANT
    console.log('\nüë§ √âTAPE 3: Cr√©ation de l\'User Owner du Tenant');
    console.log('------------------------------------------------');
    
    const ownerData = {
      name: 'Mamadou Diallo',
      email: 'mamadou.diallo@dakar-dem-dikk.com',
      password: 'Dakar2024!',
      role: 'owner',
      phone: '+221771234567',
      status: 'active',
      tenant_id: tenantId
    };

    const ownerUserId = await createOwnerUser(connection, ownerData);
    console.log(`‚úÖ User Owner cr√©√© (ID: ${ownerUserId})`);

    // 4. CR√âER LA FLOTTE POUR DAKAR DEM DIKK
    console.log('\nüöó √âTAPE 4: Cr√©ation de la Flotte');
    console.log('----------------------------------');
    
    const fleetData = {
      name: 'Flotte Dakar Dem Dikk',
      description: 'Flotte principale de transport urbain Dakar Dem Dikk',
      owner_id: ownerUserId,
      tenant_id: tenantId,
      status: 'active',
      founding_date: '2020-01-15',
      license_number: 'DDD-2020-001',
      main_address: 'Route de Ouakam, Dakar',
      city: 'Dakar',
      postal_code: '10000',
      country: 'S√©n√©gal',
      phone: '+221338200000',
      email: 'contact@dakar-dem-dikk.com',
      website: 'https://dakar-dem-dikk.com',
      max_vehicles: 150,
      max_drivers: 75,
      subscription_type: 'premium',
      subscription_expires_at: '2025-12-31 23:59:59'
    };

    const fleetId = await createFleet(connection, fleetData);
    console.log(`‚úÖ Flotte cr√©√©e (ID: ${fleetId})`);

    // 5. AFFICHER LE R√âSUM√â COMPLET
    console.log('\nüéâ R√âSUM√â DE LA CONFIGURATION');
    console.log('==============================');
    console.log('\nüëë ADMIN SUPER-UTILISATEUR (SaaS Owner):');
    console.log(`   üìß Email: ${adminData.email}`);
    console.log(`   üîë Mot de passe: ${adminData.password}`);
    console.log(`   üë§ Nom: ${adminData.name}`);
    console.log(`   üîê R√¥le: ${adminData.role}`);
    console.log(`   üè¢ Tenant ID: ${adminData.tenant_id} (Syst√®me)`);

    console.log('\nüè¢ TENANT "DAKAR DEM DIKK":');
    console.log(`   üè¢ Nom: ${tenantData.name}`);
    console.log(`   üåê Subdomain: ${tenantData.subdomain}`);
    console.log(`   üåç Domain: ${tenantData.domain}`);
    console.log(`   üìã Plan: ${tenantData.plan}`);
    console.log(`   üÜî Tenant ID: ${tenantId}`);

    console.log('\nüë§ USER OWNER DU TENANT:');
    console.log(`   üìß Email: ${ownerData.email}`);
    console.log(`   üîë Mot de passe: ${ownerData.password}`);
    console.log(`   üë§ Nom: ${ownerData.name}`);
    console.log(`   üîê R√¥le: ${ownerData.role}`);
    console.log(`   üè¢ Tenant ID: ${tenantId}`);

    console.log('\nüöó FLOTTE:');
    console.log(`   üöó Nom: ${fleetData.name}`);
    console.log(`   üìß Email: ${fleetData.email}`);
    console.log(`   üåê Site web: ${fleetData.website}`);
    console.log(`   üì± T√©l√©phone: ${fleetData.phone}`);
    console.log(`   üÜî Fleet ID: ${fleetId}`);

    console.log('\nüîó URLS D\'ACC√àS:');
    console.log('   üåê Admin SaaS: http://localhost:4028 (admin@admin.com)');
    console.log('   üè¢ Tenant Dakar Dem Dikk: http://localhost:4028?tenant_subdomain=dakar-dem-dikk');
    console.log('   üë§ Owner Login: mamadou.diallo@dakar-dem-dikk.com');

    console.log('\n‚ö†Ô∏è  IMPORTANT:');
    console.log('   ‚Ä¢ Changez les mots de passe lors de la premi√®re connexion');
    console.log('   ‚Ä¢ L\'admin super-utilisateur a acc√®s √† tous les tenants');
    console.log('   ‚Ä¢ L\'owner du tenant ne voit que ses propres donn√©es');

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration:', error.message);
    
    if (error.code === 'ER_DUP_ENTRY') {
      console.log('üí° Conseil: Un utilisateur ou tenant avec ces identifiants existe d√©j√†.');
    } else if (error.code === 'ECONNREFUSED') {
      console.log('üí° Conseil: V√©rifiez que MySQL est d√©marr√© et que les param√®tres de connexion sont corrects.');
    } else if (error.code === 'ER_ACCESS_DENIED_ERROR') {
      console.log('üí° Conseil: V√©rifiez les identifiants de connexion √† la base de donn√©es.');
    }
  } finally {
    if (connection) {
      await connection.end();
      console.log('\nüîå Connexion ferm√©e');
    }
  }
}

async function createOrUpdateAdminUser(connection, adminData) {
  // V√©rifier si l'admin existe d√©j√†
  const [existingUsers] = await connection.execute(
    'SELECT id FROM users WHERE email = ?',
    [adminData.email]
  );

  if (existingUsers.length > 0) {
    console.log(`‚ö†Ô∏è  Admin avec email ${adminData.email} existe d√©j√†, mise √† jour...`);
    
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(adminData.password, saltRounds);
    
    await connection.execute(
      'UPDATE users SET name = ?, password_hash = ?, role = ?, phone = ?, status = ?, tenant_id = ? WHERE email = ?',
      [adminData.name, hashedPassword, adminData.role, adminData.phone, adminData.status, adminData.tenant_id, adminData.email]
    );
    
    return existingUsers[0].id;
  } else {
    // Cr√©er un nouvel admin
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(adminData.password, saltRounds);
    
    const [result] = await connection.execute(
      'INSERT INTO users (name, email, password_hash, role, phone, status, tenant_id, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, NOW())',
      [adminData.name, adminData.email, hashedPassword, adminData.role, adminData.phone, adminData.status, adminData.tenant_id]
    );
    
    return result.insertId;
  }
}

async function createTenant(connection, tenantData) {
  // V√©rifier si le tenant existe d√©j√†
  const [existingTenants] = await connection.execute(
    'SELECT id FROM tenants WHERE subdomain = ?',
    [tenantData.subdomain]
  );

  if (existingTenants.length > 0) {
    console.log(`‚ö†Ô∏è  Tenant avec subdomain ${tenantData.subdomain} existe d√©j√†, mise √† jour...`);
    
    await connection.execute(
      'UPDATE tenants SET name = ?, domain = ?, plan = ?, settings = ?, status = ? WHERE subdomain = ?',
      [tenantData.name, tenantData.domain, tenantData.plan, tenantData.settings, 'active', tenantData.subdomain]
    );
    
    return existingTenants[0].id;
  } else {
    // Cr√©er un nouveau tenant
    const [result] = await connection.execute(
      'INSERT INTO tenants (name, subdomain, domain, plan, settings, status, created_at) VALUES (?, ?, ?, ?, ?, ?, NOW())',
      [tenantData.name, tenantData.subdomain, tenantData.domain, tenantData.plan, tenantData.settings, 'active']
    );
    
    return result.insertId;
  }
}

async function createOwnerUser(connection, ownerData) {
  // V√©rifier si l'owner existe d√©j√†
  const [existingUsers] = await connection.execute(
    'SELECT id FROM users WHERE email = ?',
    [ownerData.email]
  );

  if (existingUsers.length > 0) {
    console.log(`‚ö†Ô∏è  Owner avec email ${ownerData.email} existe d√©j√†, mise √† jour...`);
    
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(ownerData.password, saltRounds);
    
    await connection.execute(
      'UPDATE users SET name = ?, password_hash = ?, role = ?, phone = ?, status = ?, tenant_id = ? WHERE email = ?',
      [ownerData.name, hashedPassword, ownerData.role, ownerData.phone, ownerData.status, ownerData.tenant_id, ownerData.email]
    );
    
    return existingUsers[0].id;
  } else {
    // Cr√©er un nouvel owner
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(ownerData.password, saltRounds);
    
    const [result] = await connection.execute(
      'INSERT INTO users (name, email, password_hash, role, phone, status, tenant_id, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, NOW())',
      [ownerData.name, ownerData.email, hashedPassword, ownerData.role, ownerData.phone, ownerData.status, ownerData.tenant_id]
    );
    
    return result.insertId;
  }
}

async function createFleet(connection, fleetData) {
  // V√©rifier si la flotte existe d√©j√† pour ce tenant
  const [existingFleets] = await connection.execute(
    'SELECT id FROM fleets WHERE tenant_id = ? AND name = ?',
    [fleetData.tenant_id, fleetData.name]
  );

  if (existingFleets.length > 0) {
    console.log(`‚ö†Ô∏è  Flotte ${fleetData.name} existe d√©j√† pour ce tenant, mise √† jour...`);
    
    await connection.execute(`
      UPDATE fleets SET 
        description = ?, owner_id = ?, status = ?, founding_date = ?, 
        license_number = ?, main_address = ?, city = ?, postal_code = ?, 
        country = ?, phone = ?, email = ?, website = ?, max_vehicles = ?, 
        max_drivers = ?, subscription_type = ?, subscription_expires_at = ?
      WHERE tenant_id = ? AND name = ?
    `, [
      fleetData.description, fleetData.owner_id, fleetData.status, fleetData.founding_date,
      fleetData.license_number, fleetData.main_address, fleetData.city, fleetData.postal_code,
      fleetData.country, fleetData.phone, fleetData.email, fleetData.website, fleetData.max_vehicles,
      fleetData.max_drivers, fleetData.subscription_type, fleetData.subscription_expires_at,
      fleetData.tenant_id, fleetData.name
    ]);
    
    return existingFleets[0].id;
  } else {
    // Cr√©er une nouvelle flotte
    const [result] = await connection.execute(`
      INSERT INTO fleets (
        name, description, owner_id, tenant_id, status, founding_date,
        license_number, main_address, city, postal_code, country, phone,
        email, website, max_vehicles, max_drivers, subscription_type,
        subscription_expires_at, created_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())
    `, [
      fleetData.name, fleetData.description, fleetData.owner_id, fleetData.tenant_id,
      fleetData.status, fleetData.founding_date, fleetData.license_number,
      fleetData.main_address, fleetData.city, fleetData.postal_code, fleetData.country,
      fleetData.phone, fleetData.email, fleetData.website, fleetData.max_vehicles,
      fleetData.max_drivers, fleetData.subscription_type, fleetData.subscription_expires_at
    ]);
    
    return result.insertId;
  }
}

// Fonction principale
async function main() {
  // V√©rifier les variables d'environnement
  if (!process.env.DB_PASSWORD && !process.env.DB_USER) {
    console.log('‚ö†Ô∏è  Variables d\'environnement non trouv√©es');
    console.log('üí° Assurez-vous que le fichier .env est configur√© avec:');
    console.log('   DB_HOST=localhost');
    console.log('   DB_USER=root');
    console.log('   DB_PASSWORD=votre_mot_de_passe');
    console.log('   DB_NAME=karangue221');
    console.log('   DB_PORT=3306\n');
  }

  await setupSaaSStructure();
}

// Ex√©cuter le script
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { setupSaaSStructure }; 